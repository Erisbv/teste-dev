<?php

namespace Tests\Feature;

use App\Models\Library;
use App\Repositories\LibraryRepository;
use Illuminate\Database\QueryException;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

/**
 *
 * Class LibraryTest
 *
 * @private LibraryRepository $LibraryRepository
 */
class LibraryTest extends TestCase
{
    //RefreshDatabase
    use DatabaseTransactions, WithFaker;

    private LibraryRepository $LibraryRepository;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->LibraryRepository = LibraryRepository::make();
    }

    public function test_repository_constructor()
    {
        $this->assertTrue($this->LibraryRepository instanceof LibraryRepository, "LIBRARY REPOSITORY INSTANTIATE ERROR");
    }

    public function test_create_unique_success()
    {
        $library = Library::factory()->makeOne();
        $libraryCreate = $this->LibraryRepository->store($library);
        $this->assertTrue($libraryCreate, "REPOSITORY TEST CREATE LIBRARY ERROR");
    }

    public function test_create_unique_error()
    {
        $libraryA = Library::factory()->makeOne(['cod' => 9999]);
        $libraryB = Library::factory()->makeOne(['cod' => 9999]);
        $libraryCreateSuccess = $this->LibraryRepository->store($libraryA);
        $this->assertTrue($libraryCreateSuccess, "REPOSITORY TEST UNIQUE ERROR FIRST BLOCK NOT WORKING");
        $this->expectException(QueryException::class);
        $this->LibraryRepository->store($libraryB);
    }

    public function test_get_by_id()
    {
        /**
         * @var Library $libraryFirst
         */
        $libraryFirst = Library::factory()->makeOne(['id' => 9999]);
        $this->LibraryRepository->store($libraryFirst);

        $library = $this->LibraryRepository->getById($libraryFirst->id);
        $this->assertTrue($library instanceof Library, "LIBRARY TEST GET BY ID INSTANTIATE ERROR");
        $this->assertNotEmpty($library->toArray(), "LIBRARY GET BY ID RETURN ERROR - IS EMPTY");
        $this->assertEquals(9999, $library->id, "REPOSITORY TEST GET BY ID ERROR");
        $this->assertArrayHasKey('author_id', $library->toArray(), "REPOSITORY TEST GET BY ID RELATIONS ERROR");
        $this->assertArrayHasKey('category_id', $library->toArray(), "REPOSITORY TEST GET BY ID RELATIONS ERROR");
    }
}
